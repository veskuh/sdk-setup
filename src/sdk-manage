#!/bin/bash

# This is a helper script for the Mer SDK to manage sb2 target and
# toolchain installation


usage()
{
    cat <<EOF
    usage (keep the arguments order): 

           $0 --toolchain --list
           $0 --toolchain --install <arch>
           $0 --toolchain --remove <arch>

           $0 --target --list
           $0 --target --install <name> <toolchain> <url>
           $0 --target --remove  <name>

           $0 --devel --list <target>
           $0 --devel --install <target> <devel package list>
           $0 --devel --remove <target> <devel package list>

           $0 --sdk --version
           $0 --sdk --upgrade

       This is the Mer SDK VM manager
       For information see https://wiki.merproject.org/wiki/Platform_SDK_on_VirtualBox
       It is primarily intended for use by the SDK web interface.


EOF
    [[ $1 == "--exit" ]] && { exit 1; }
    return 0
}

if [[ $EUID -ne 0 ]]; then
    exec sudo $0 "$@"
    echo "$0 must be run as root and sudo failed; exiting"
    exit 1
fi

# From now on, exit if variables not set
set -u

# Make sure normal users can use any dirs we make
umask 022


################################################################'
# toolchain

# Our toolchains are available through zypper as Mer-SB2-* patterns

get_toolchains() {
    zypper search -t pattern Mer-SB2-* | grep Mer-SB2 | while IFS='| ' read installed pkg dummy; do
	echo "${pkg},${installed}"
    done 
    return ${PIPESTATUS[0]}
}

ensure_installed() {
    get_toolchains | egrep -s "^$1,i$" >/dev/null
}

ensure_installable() {
    get_toolchains | egrep -s "^$1,$" >/dev/null
}

install_toolchain() {
    pkg=$1
    if ensure_installable $pkg; then
	zypper --non-interactive install -t pattern $pkg
	return $?
    else
	echo "Toolchain $pkg doesn't exist or is already installed- can not install."
	exit 2
    fi
}

remove_toolchain() {
    pkg=$1
    if ensure_installed $pkg; then
	zypper --non-interactive remove -t pattern $pkg
	return $?
    else
	echo "Toolchain $pkg is not installed - can not remove."
	exit 2
    fi
}

manage_toolchains() {
    if ! [[ $1 ]]; then
	usage --exit
    fi

    case "$1" in
	--list )
	    get_toolchains
	    return $?
	    ;;
	--install )
	    shift
	    install_toolchain "$@"
	    return $?
	    ;;
	--remove )
	    shift
	    remove_toolchain "$@"
	    return $?
	    ;;
	* )
	    echo "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################'
# Devel packages

# Our devel packages are available through zypper as -devel packages :)

assert_target_and_setup() {
    if ! [[ -f /home/mersdk/.scratchbox2/$target/sb2.config ]]; then
	echo "Target $target is not a valid Scratchbox2 target"
	exit 1
    fi
    set +u
    . /home/mersdk/.scratchbox2/$target/sb2.config
    set -u
}

t_zypper() {
    (
	cd $SBOX_TARGET_ROOT
	sudo -i -u mersdk sb2 -t $target -m sdk-install -R zypper "$@"
    )
}

get_develpkgs() {
    t_zypper search -- -devel | tail -n +6 | while IFS='| ' read installed pkg dummy; do
	echo "${pkg},${installed}"
    done 
    return ${PIPESTATUS[0]}
}

manage_develpkgs() {
    if ! [[ {$1:-} ]]; then
	usage --exit
    fi

    case "$1" in
	--list )
	    shift
	    target=$1
	    assert_target_and_setup
	    get_develpkgs $target
	    return $?
	    ;;
	--install )
	    shift
	    target=$1
	    assert_target_and_setup
	    shift
	    t_zypper --non-interactive ref
	    t_zypper --non-interactive install "$@"
	    synchronise_target $target
	    return $?
	    ;;
	--remove )
	    shift
	    target=$1
	    assert_target_and_setup
	    shift
	    t_zypper --non-interactive remove "$@"
	    synchronise_target $target
	    return $?
	    ;;
	* )
	    echo "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################
# Targets

get_targets() {
    tgts=$(sudo -i -u mersdk sb2-config -l 2>&1)
    if ! grep 'sb2-init' <<< "$tgts" >/dev/null ; then
	echo "$tgts"
    fi
}

assert_target_name_valid() {
    pat=" |\"|'"
    if [[ $1 =~ $pat ]] || [[ ! $1 ]]; then
    	echo "Target name '$1' is not a valid Scratchbox2 target name"
	exit 1
    fi
}

synchronise_target() {
    # This could be minimised in the future if sf is not fixed
    # Ignore errors as we sometimes have dangling symlinks and
    # still want to keep clean
    rsync -a --no-devices --no-specials --copy-links \
          --delete --ignore-errors \
	  /srv/mer/targets/$1/. /host_targets/$1/.
}

# Download and install a rootfs
install_target() {
    name=$1
    toolchain=$2
    url=$3 #FIXME: check url validity
    echo Making sure the right toolchain exists
    if ! ensure_installed $toolchain; then
	echo "Installing required toolchain: $toolchain"
	install_toolchain $toolchain
    fi

    local_file=""
    if [[ $url = file\:\/\/\/* ]]; then
	local_file=${url//file\:\/\//}
    else
	echo Downloading target
	echo "curl $url > /srv/mer/targets/$name.tar.bz2"
	curl "$url" > "/srv/mer/targets/$name.tar.bz2"
	curl_status=$?
	if [ \( $curl_status -ne 0 \) -o \( $(stat -c %s "/srv/mer/targets/$name.tar.bz2") -lt 10000 \) ]; then #hash check anybody?
	    echo "Download failed"
	    return 3
	fi
    fi

    # Virtualbox shared folders don't work too well at the moment
    # Unpack targets to a private area within the VM
    rm -rf /srv/mer/targets/$name
    mkdir -p /srv/mer/targets/$name
    mkdir -p /host_targets/$name

    cd /srv/mer/targets/$name
    
    echo
    echo Decompressing target

    if [ -n "$local_file" ]; then
	tar jxf "$local_file"
    else
	tar jxf "/srv/mer/targets/$name.tar.bz2"
    fi
    
    if [ $? -ne 0 ]; then
	if [ "$( df --sync / | tr -s ' ' | tail -n 1 | cut -d ' ' -f 4 )" -lt 10000 ]; then
	    echo "Not enough disk space to unpack target image"
	else
	    echo "Couldn't unpack target image"
	fi
	rm -rf /srv/mer/targets/$name

	return 4
    fi

    chown -R mersdk /srv/mer/targets/$name

    echo Synchronising target with host
    synchronise_target $name

    [ $? -ne 0 ] && echo "Rsync didn't exactly run as intended, expect problems."

    [[ ! $local_file ]] && rm "/srv/mer/targets/$name.tar.bz2"

    echo Setting up SB2

    case $toolchain in
	*-arm*)
	    architecture=$(echo $toolchain | tr '-' '\n' | tail -n 1)
	    transparency="-c /usr/bin/qemu-arm-dynamic"
	    compiler="/opt/cross/bin/$architecture-meego-linux-gnueabi-gcc"
	    ;;
	*-mipsel)
	    transparency="-c /usr/bin/qemu-mipsel-dynamic"
	    compiler="/opt/cross/bin/mipsel-meego-linux-gnu-gcc"
	    ;;
	*-i486*)
	    transparency=""
	    compiler="/opt/cross/bin/i486-meego-linux-gnu-gcc"
	    ;;
    esac

    sudo -i -u mersdk sb2-init -L "--sysroot=/" -C "--sysroot=/" $transparency -m sdk-build -n -N -t / "$name" $compiler

    echo Target $name now setup
}

remove_target() {
    name=$1
    if [ -d /home/mersdk/.scratchbox2/$name ]; then
	rm -r /home/mersdk/.scratchbox2/$name
	rm -rf /srv/mer/targets/$name
	rm -rf /host_targets/$name
    else
	echo "Target not installed - can't delete"
	exit 2
    fi
}


manage_targets() {
    if ! [[ ${1:-} ]]; then
	usage --exit
    fi

    case "${1:-}" in
	--list )
	    get_targets
	    ;;
	--install )
	    shift
	    assert_target_name_valid ${1:-}
	    install_target "$@"
	    ;;
	--remove )
	    shift
	    assert_target_name_valid ${1:-}
	    remove_target "$@"
	    ;;
	* )
	    echo "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################
# SDK

get_sdk_version() {
    sdk-version
}

upgrade_sdk() {
    sdk-version --latest --go
}

manage_sdk() {
    if ! [[ $1 ]]; then
	usage --exit
    fi

    case "$1" in
	--version )
	    get_sdk_version
	    ;;
	--upgrade )
	    shift
	    upgrade_sdk "$@"
	    ;;
	* )
	    echo "$1 not recognised"
	    usage --exit
	    ;;
    esac
}


################################################################
# utility

################

################################################################
# Main

if ! [[ ${1:-} ]]; then
    usage --exit
fi

case "$1" in
    --toolchain )
	shift
	manage_toolchains "$@"
	;;
    --target )
	shift
	manage_targets "$@"
	;;
    --devel )
	shift
	manage_develpkgs "$@"
	;;
    --sdk )
	shift
	manage_sdk "$@"
	;;
    * )
	echo "$1 not recognised"
	usage --exit
	;;
esac
